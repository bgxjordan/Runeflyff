CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

PROJECT(Runeflyff)

# Find includes in corresponding build directories
SET(CMAKE_INCLUDE_CURRENT_DIR ON)

# Instruct CMake to run moc automatically when needed.
SET(CMAKE_AUTOMOC ON)

# Check for C++11/C++0x compatibility. This is required.

INCLUDE(CheckCXXCompilerFlag)

SET(MS_CXX14 "/std:c++14")
SET(MS_CXX17 "/std:c++17")

IF (MSVC)
    CHECK_CXX_COMPILER_FLAG(${MS_CXX14} MSVC_SUPPORTS_CXX14)
    CHECK_CXX_COMPILER_FLAG(${MS_CXX17} MSVC_SUPPORTS_CXX17)
    SET(MSVC_SUPPORTS_CXX11 MSVC_VERSION > 1500)

    IF (MSVC_SUPPORTS_CXX17)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MS_CXX17}")
    ELSEIF (MSVC_SUPPORTS_CXX14)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MS_CXX14}")
    ELSEIF (MSVC_SUPPORTS_CXX11)
        MESSAGE(WARN "The compiler ${CMAKE_CXX_COMPILER} has limited C++11 support. Use Visual Studio 2017 or later for best results.")
    ELSE()
        MESSAGE(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
    ENDIF()
ENDIF()

# GCC and LLVM support the same command line arguments

SET(GNU_COMPAT_COMPILER TRUE)

SET(GNU_CXX0X "-std=c++0x")
SET(GNU_CXX11 "-std=c++11")
SET(GNU_CXX14 "-std=c++14")
SET(GNU_CXX17 "-std=c++17")

CHECK_CXX_COMPILER_FLAG(${GNU_CXX0X} GNU_SUPPORTS_CXX0X)
CHECK_CXX_COMPILER_FLAG(${GNU_CXX11} GNU_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG(${GNU_CXX14} GNU_SUPPORTS_CXX14)
CHECK_CXX_COMPILER_FLAG(${GNU_CXX17} GNU_SUPPORTS_CXX17)

IF (GNU_SUPPORTS_CXX17)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GNU_CXX17}")
ELSEIF (GNU_SUPPORTS_CXX14)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GNU_CXX14}")
ELSEIF (GNU_SUPPORTS_CXX11)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GNU_CXX11}")
ELSEIF (GNU_SUPPORTS_CXX0X)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GNU_CXX0X}")
ELSE()
    MESSAGE(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
ENDIF()

#SET(QT5_MIN_VERSION 5.10)
#SET(Qt5_DIR "E:/CppLibs/QT/5.13.2/5.13.2/mingw73_32/lib/cmake/Qt5")

# QT 5.x dependencies
#FIND_PACKAGE(Qt5 ${QT5_MIN_VERSION} REQUIRED COMPONENTS
#        Core)

#GET_TARGET_PROPERTY(QtCore_Location Qt5::Core LOCATION_${CMAKE_BUILD_TYPE})

ADD_SUBDIRECTORY(login)
ADD_SUBDIRECTORY(world)